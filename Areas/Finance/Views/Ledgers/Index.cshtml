@model iSynergy.Areas.Finance.Models.GeneralLedgerInquiryViewModel

@{
    ViewBag.Title = "Ledger";
}

@if (Model.Ledgers != null && Model.Ledgers.Count > 0)
{
    <div style="text-align:right">
        <a id="export" href="#"><Span class="btn btn-success btn-icon background"><i class="fa fa-file-excel-o"></i> &nbsp; Export</Span></a>
        <button id="printBtn" type="button" class="btn btn-success">Print!</button>
    </div>

    <section class="box">
        <header class="panel_header">
            @*<h2 class="title pull-left">Ledger</h2>*@
        </header>
        <div class="content-body">
            <div id="ledger" class="row">
                <div class="col-xs-12">
                    <div class="col-xs-12">
                        <div class="" data-pattern="priority-columns">
                            <table class="table table-small-font no-mb table-bordered ledgerTable">
                                <thead>
                                    <tr>
                                        <th class="col-md-2">Type</th>
                                        <th class="col-md-1">Reference</th>
                                        <th class="col-md-2">Date</th>
                                        <th class="col-md-3">Memo</th>
                                        <th class="col-md-1">Debit</th>
                                        <th class="col-md-1">Credit</th>
                                        <th class="col-md-1">Balance</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @{
                                       
                                        Decimal totalDebit = new Decimal();
                                        Decimal totalCredit = new Decimal();
                                        string format = "#,##0.00;(#,##0.00)";
                                        string totalBalance = "";
                                    }
                                    @foreach (var ledger in Model.Ledgers)
                                    {
                                        Decimal commulativeBalance = new Decimal();
                                        <tr style="font-weight:bold; background-color:lightgray">
                                            <td colspan="7">
                                                <strong>
                                                    @Html.ActionLink(ledger.Account.AccountId + "  " + @ledger.Account.Title, "Detail", "Ledgers", new { id = ledger.Account.AccountId }, null)
                                                </strong>
                                            </td>
                                        </tr>
                                            <tr>
                                                <td colspan="4">
                                                    Opening Balance
                                                </td>
                                                <td align="right">
                                                    @{
                                                        var openingDebitBalance = ledger.OpeningDebitBalance == null ? new Decimal(0) : (Decimal)ledger.OpeningDebitBalance;
                                                    }
                                                    @openingDebitBalance.ToString(format)
                                                </td>
                                                <td align="right">
                                                    @{
                                                        var openingCreditBalance = ledger.OpeningCreditBalance == null ? new Decimal(0) : (Decimal)ledger.OpeningCreditBalance;
                                                    }
                                                    @openingCreditBalance.ToString(format)
                                                </td>
                                                <td align="right">
                                                    @((openingDebitBalance - openingCreditBalance).ToString(format))
                                                    @{
                                                        commulativeBalance += openingDebitBalance - openingCreditBalance;
                                                    }
                                                </td>
                                            </tr>
                                                        {
                                                            totalDebit += openingDebitBalance;
                                                            totalCredit += openingCreditBalance;
                                                        }
                                                        foreach (var posting in ledger.Postings)
                                                        {
                                                            <tr>
                                                                <td>
                                                                    @switch (posting.Journal.VoucherType)
                                                                    {
                                                                        case iSynergy.Areas.Finance.Models.VoucherType.BPV:
                                                                            @:Bank Payment
                                                                    break;
                                                                        case iSynergy.Areas.Finance.Models.VoucherType.BRV:
                                                                            @:Bank Receipt
                                                                    break;
                                                                        case iSynergy.Areas.Finance.Models.VoucherType.CPV:
                                                                            @:Cash Payment
                                                                    break;
                                                                        case iSynergy.Areas.Finance.Models.VoucherType.CRV:
                                                                            @:Cash Receipt
                                                                    break;
                                                                        case iSynergy.Areas.Finance.Models.VoucherType.JV:
                                                                            @:Journal Voucher
                                                                    break;
                                                                        default: /* Optional */
                                                                            break;
                                                                    }
                                                                </td>
                                                                <td>@posting.Journal.Reference</td>
                                                                <td>@posting.Journal.Date.ToString("dd-MMM-yyyy")</td>
                                                                <td>@posting.Memo</td>
                                                                @if (posting.Debit != 0)
                                                                {
                                                                    <td align="right">@(((double)posting.Debit).ToString(format))</td>
                                                                }
                                                                else
                                                                {
                                                                    <td></td>
                                                                }

                                                                @if (posting.Credit != 0)
                                                                {
                                                                    <td align="right">@(((double)posting.Credit).ToString(format))</td>
                                                                }
                                                                else
                                                                {
                                                                    <td></td>
                                                                }
                                                                <td align="right">
                                                                    @{
                                                                        List<string> creditNormalAccounts = new List<string>() { "02", "03", "04" };
                                                                        var accountClass = posting.AccountId.Substring(0, 2);
                                                                        Decimal balance = creditNormalAccounts.Contains(accountClass)
                                                                                            ? (Decimal)(posting.Credit - posting.Debit)
                                                                                            : (Decimal)(posting.Debit - posting.Credit);
                                                                        commulativeBalance += balance;
                                                                        string strBalance = commulativeBalance.ToString(format);
                                                                        totalBalance = strBalance;
                                                                    }
                                                                    @strBalance
                                                                </td>
                                                            </tr>
                                                            }
                                                            totalDebit += (Decimal)ledger.Postings.Sum(x => x.Debit);
                                                            totalCredit += (Decimal)ledger.Postings.Sum(x => x.Credit);
                                                        }

                                    <tr style="font-weight:bold">
                                        <td colspan="4">Closing Balance</td>
                                        <td align="right">@totalDebit.ToString(format)</td>
                                        <td align="right">@totalCredit.ToString(format)</td>
                                        <td align="right">@((totalDebit - totalCredit).ToString(format))</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}
<section class="box has-border-left-3">
    <header class="panel_header">
        <h2 class="title pull-left">Ledger Filters</h2>
    </header>
    <div class="content-body">
        <div class="row">
            <div class="col-xs-12">
                @using (Html.BeginForm("Index", "Ledgers", FormMethod.Post, new { id = "gliForm" }))
                {
                    @Html.AntiForgeryToken()

                    <div class="form-horizontal">
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.fromAccountId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(
                                                    model => model.fromAccountId,
                                                    new
                                                    {
                                                        htmlAttributes = new
                                                        {
                                                            @class = "form-control accountidcategory",
                                                            title = "Valid format is 00 or 00-00 or 00-00-00 or 00-00-00-0000"
                                                        }
                                                    }
                                               )
                                @Html.ValidationMessageFor(model => model.fromAccountId, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.toAccountId, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(
                                                    model => model.toAccountId,
                                                    new
                                                    {
                                                        htmlAttributes = new
                                                        {
                                                            @class = "form-control accountidcategory",
                                                            title = "Valid format is 00 or 00-00 or 00-00-00 or 00-00-00-0000"
                                                        }
                                                    }
                                               )
                                @Html.ValidationMessageFor(model => model.toAccountId, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.FromDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.FromDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.FromDate, "", new { @class = "text-danger" })
                            </div>
                            @Html.LabelFor(model => model.ToDate, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-3">
                                @Html.EditorFor(model => model.ToDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.ToDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-md-offset-7 col-md-5">
                                <input type="submit" value="Submit" class="btn btn-success" />
                            </div>
                        </div>
                    </div>
                }


            </div>
        </div>
    </div>
</section>

<div hidden="hidden">
    <div id="printThis" style="padding-left:30px;padding-right:30px;">
        <table  style="width:100%;">
            <tr>
                <td style="width:50%;">
                    <table style="width: 100%; margin-bottom:40px;">
                        <tbody>
                            <tr>
                                <td style="width: 97%;" colspan="2">
                                    <h3>GL Account Transactions</h3>
                                </td>
                            </tr>
                            <tr>
                                <td style="width: 25%;">&nbsp;</td>
                                <td style="width: 75%;">&nbsp;</td>
                            </tr>
                            <tr>
                                <td style="width: 25%;">Fiscal Year</td>
                                <td style="width: 75%;">@Model.fiscalYear</td>
                            </tr>
                            <tr>
                                <td style="width: 25%;">Period</td>
                                <td style="width: 75%;">@Model.FromDate.ToString("dd-MMM-yyyy") to @Model.ToDate.ToString("dd-MMM-yyyy")</td>
                            </tr>

                            @if (Model.fromAccountId != null && Model.toAccountId != null)
                            {
                                <tr>
                                    <td style="width: 25%;">Accounts</td>
                                    <td style="width:75%;">
                                        @if (Model.fromAccountId != null)
                                        {
                                            @:from @Model.fromAccountId
                                        }
                                        @if (Model.toAccountId != null)
                                        {
                                            @:to @Model.toAccountId
                                        }
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>
                </td>
                <td style="width:50%;">
                    <table style="width: 100%; margin-bottom:40px;">
                        <tr>
                            <td align="center">
                                <div style="height:100px;">
                                    <img src="@Url.Content("~" + iSynergy.Shared.AppSettings.getKey("CompanyLogo"))" alt="Company Logo" style="width:100%;height:100%;object-fit:contain;" />
                                </div>
                            </td>
                        </tr>
                        <tr>
                            <td align="center">
                                <h3>@iSynergy.Shared.AppSettings.getKey("CompanyName")</h3>
                            </td>
                        </tr>
                    </table>
                </td>
            </tr>
        </table>
    </div>
</div>

<style type="text/css">
    @* set the style for list items that are filled with JSON search results *@ 
    .ui-menu-item {
        background-color: #e45131;
        width: 300pt;
        color: white;
        padding-left: 5pt;
        cursor: pointer;
        list-style: none;
    }

    .ui-menu-item:hover {
        background-color: #e8962e;
    }

    .ui-helper-hidden-accessible {
        @* hide the aria helper span*@ border: 0;
        clip: rect(0 0 0 0);
        height: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;
    }
</style>

@section Scripts {
    @Scripts.Render("~/Scripts/App/AccountIdAutoComplete.js")
    @Scripts.Render("~/Scripts/App/AccountIdCategoryAutoComplete.js")
    @Scripts.Render("~/Content/cryptonia_theme/assets/plugins/jquery-ui/smoothness/jquery-ui.min.js")
    <link href="~/Content/cryptonia_theme/assets/plugins/jquery-ui/smoothness/jquery-ui.min.css" rel="stylesheet" />
    <script src="~/Scripts/jQuery.print.min.js"></script>
    <script>
        $('#printBtn').on('click', function () { 
            $("#ledger").print({
                title: "Ledger - Printed by @Model.printedBy",
                prepend: $('#printThis')
            });
        });
    </script>
    <script src="~/Scripts/jquery.table2excel.min.js"></script>
    <script>
            $('#export').click(function () {
                $(".ledgerTable").table2excel({
                    exclude: ".noExl",
                    name: "Ledgers",
                    filename: "ledgers" + new Date().toISOString().replace(/[\-\:\.]/g, ""),
                    fileext: ".xls",
                    exclude_img: true,
                    exclude_links: true,
                    exclude_inputs: true
                });
            });
    </script>
}